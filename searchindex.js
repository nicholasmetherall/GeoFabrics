Search.setIndex({"docnames": ["autoapi/benchmarking/index", "autoapi/geofabrics/bathymetry_estimation/index", "autoapi/geofabrics/dem/index", "autoapi/geofabrics/geometry/index", "autoapi/geofabrics/index", "autoapi/geofabrics/processor/index", "autoapi/geofabrics/version/index", "autoapi/index", "autoapi/main/index", "index"], "filenames": ["autoapi/benchmarking/index.rst", "autoapi/geofabrics/bathymetry_estimation/index.rst", "autoapi/geofabrics/dem/index.rst", "autoapi/geofabrics/geometry/index.rst", "autoapi/geofabrics/index.rst", "autoapi/geofabrics/processor/index.rst", "autoapi/geofabrics/version/index.rst", "autoapi/index.rst", "autoapi/main/index.rst", "index.rst"], "titles": ["<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">benchmarking</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">geofabrics.bathymetry_estimation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">geofabrics.dem</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">geofabrics.geometry</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">geofabrics</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">geofabrics.processor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">geofabrics.version</span></code>", "API Reference", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">main</span></code>", "Welcome to Geofabrics\u2019s documentation!"], "terms": {"A": [0, 1, 2, 3, 4, 5, 8], "conveni": [0, 8], "script": [0, 8], "run": [0, 4, 5, 8], "mani": [0, 5], "combin": [0, 2, 4, 5], "chunk_siz": [0, 2], "numbers_of_cor": 0, "small": 0, "sub": 0, "set": [0, 2, 5], "catchment": [0, 1, 2, 3, 5], "help": 0, "select": [0, 2, 5], "an": [0, 1, 2, 3, 5], "appropi": [0, 3], "chink_siz": 0, "number_of_cor": 0, "befor": [0, 1, 3, 5], "process": [0, 2, 5], "entir": [0, 1], "parse_arg": [0, 8], "expect": [0, 3, 8], "command": [0, 8], "line": [0, 1, 8], "argument": [0, 8], "form": [0, 8], "instruct": [0, 4, 5, 8], "path": [0, 2, 3, 5, 8], "json": [0, 4, 5, 8], "file": [0, 1, 2, 3, 4, 5, 8], "benchmark_process": 0, "arg": [0, 8], "dem": [0, 1, 3, 4, 5, 7, 8], "gener": [0, 1, 2, 4, 5, 7, 8], "pipelin": [0, 4, 5, 8], "given": [0, 1, 5, 8], "specifi": [0, 1, 2, 3, 5, 8], "rang": [0, 2], "differ": 0, "option": [0, 2, 5], "save": [0, 2, 5], "each": [0, 1, 3, 5], "separ": [0, 1], "plot": 0, "execut": [0, 5], "time": 0, "all": [0, 2, 3, 5], "differnet": 0, "configur": 0, "end": [0, 3], "main": [0, 5, 7, 9], "The": [0, 1, 2, 3, 5, 8], "entri": [0, 8], "point": [0, 1, 2, 3, 8], "geofabr": [0, 7, 8], "thi": [1, 2, 3, 5, 7], "contain": [1, 2, 3, 4, 5, 6, 7, 8], "associ": [1, 2, 3, 4, 5], "characteris": [1, 5], "channel": [1, 3, 5], "geometri": [1, 2, 4, 5, 7], "inform": [1, 2, 3, 5, 6], "resolut": [1, 2, 3, 5], "sampling_direct": 1, "1": [1, 5, 7], "defin": [1, 2, 3, 5], "centr": 1, "from": [1, 2, 3, 4, 5], "digit": 1, "network": [1, 5], "paramet": [1, 2, 3, 5, 8], "geopanda": [1, 2, 3, 5], "geodatafram": [1, 2, 3, 5], "float": [1, 2, 3, 5], "int": [1, 2, 3], "classmethod": 1, "from_rec": 1, "rec_network": 1, "reach_id": 1, "area_threshold": [1, 5], "max_iter": 1, "10000": 1, "creat": [1, 2, 3, 5, 7], "object": [1, 5], "rec": [1, 5], "between": 1, "upstream": [1, 3], "downstream": [1, 3], "reach": 1, "name": [1, 3, 5], "id": 1, "area": [1, 2, 3, 5], "threshold": 1, "metr": 1, "squar": 1, "below": 1, "which": [1, 2, 3, 5], "ignor": 1, "maximum": 1, "number": 1, "iter": 1, "along": [1, 5], "singl": [1, 3], "strand": 1, "trace": 1, "travel": 1, "get_sampled_spline_fit": 1, "return": [1, 2, 3, 5], "smooth": [1, 2, 3], "sampl": [1, 3, 5], "after": [1, 2, 5], "ha": [1, 2, 5], "been": [1, 5], "fit": 1, "spline": 1, "corner": 1, "catchment_corridor_radiu": 1, "radiu": 1, "corridor": 1, "determin": [1, 3, 5], "width": [1, 3, 5], "get_smoothed_spline_fit": 1, "smoothing_multipli": 1, "aligned_centrelin": 1, "type": [1, 2, 3, 5], "numpi": [1, 2, 3], "ndarrai": [1, 2, 3], "get_channel_catch": 1, "corridor_radiu": 1, "get_spaced_point": 1, "space": [1, 3, 5], "data": [1, 2, 3, 4, 5], "frame": 1, "centrelin": [1, 5], "straight": [1, 2], "segment": 1, "sample_direct": 1, "ar": [1, 2, 3, 5], "same": [1, 3], "direct": 1, "thei": [1, 2], "order": 1, "opposit": 1, "get_spaced_points_with_corn": 1, "channelcharacterist": [1, 5], "gnd_dem": 1, "veg_dem": [1, 5], "cross_section_spac": [1, 3], "debug": [1, 5], "fals": [1, 2], "estim": [1, 2, 3, 4, 5], "slope": [1, 5], "other": [1, 3, 5], "characterist": [1, 4, 5], "detail": 1, "river": [1, 2, 3, 4, 5], "xarrai": [1, 2, 5], "dataset": [1, 2, 5], "bool": [1, 2, 5], "properti": [1, 2, 3, 5], "number_of_sampl": 1, "take": [1, 2, 5], "cross_sect": 1, "should": [1, 5], "odd": 1, "subtract": 1, "instead": 1, "ad": [1, 2, 3, 5], "ensur": [1, 2, 3, 5], "within": [1, 2, 3, 5], "centre_index": 1, "index": [1, 5, 9], "taken": 1, "transect": [1, 5], "calculate_min_z_start_i": 1, "min_z_search_radiu": 1, "start": 1, "begin": [1, 3], "look": 1, "minimum": [1, 5], "z": [1, 2, 3], "distanc": [1, 2], "search": [1, 9], "calculate_min_z_stop_i": 1, "stop": 1, "node_centred_reach_cross_sect": 1, "sampled_channel": 1, "calcul": [1, 2, 3, 5], "midpoint": 1, "polylin": [1, 5], "ani": [1, 2, 3, 5], "branch": 1, "describ": 1, "sample_cross_sect": 1, "elev": [1, 2, 3, 5], "also": [1, 3, 5], "add": [1, 2, 5], "measur": 1, "min_z_centr": 1, "valu": [1, 2, 3, 5], "fixed_thresholded_widths_from_centre_within_radiu": 1, "cross_section_elev": 1, "search_radiu": 1, "min_channel_width": 1, "base": [1, 2, 5], "thresbold": 1, "bank": [1, 3], "height": [1, 2, 3], "abov": 1, "water": [1, 2], "level": 1, "work": [1, 3], "out": [1, 2, 5], "doesn": [1, 2], "t": [1, 2], "detect": 1, "until": 1, "less": 1, "than": [1, 3], "widest": 1, "dict": [1, 2, 3, 5, 8], "side": [1, 3], "valid": [1, 2], "variable_thresholded_widths_from_centre_within_radiu": 1, "maximum_threshold": 1, "amount": [1, 5], "increas": 1, "fixed_threshold_width": 1, "gnd_sampl": 1, "veg_sampl": 1, "start_index": 1, "z_water": 1, "search_radius_index": 1, "cross": 1, "section": 1, "fix": 1, "check": [1, 5], "outward": [1, 3], "forward": 1, "backward": 1, "ground": [1, 2, 5], "vegrtat": 1, "indic": 1, "awai": 1, "fixed_threshold_width_outward": 1, "If": [1, 2, 5, 8], "i": [1, 2, 3, 5, 8], "nan": 1, "cycl": 1, "gone": 1, "fixed_threshold_width_forward": 1, "stop_index": 1, "approach": [1, 2, 3, 5], "through": 1, "fixed_threshold_width_backward": 1, "align_channel": [1, 5], "initial_channel": 1, "width_centre_smoothing_multipli": 1, "cross_section_radiu": 1, "initi": 1, "align": [1, 3, 5], "includ": [1, 2, 5], "2": [1, 2, 3], "length": [1, 5], "estimate_width_and_slop": 1, "aligned_channel": [1, 5], "max_threshold": 1, "river_polygon_smoothing_multipli": 1, "bed": [1, 3, 5], "e": [1, 2, 3, 5], "cliff": 1, "appli": [1, 2], "prior": 1, "construct": [1, 5], "polygon": [1, 2, 3, 5], "repres": 1, "load": [2, 5], "referencedem": 2, "dem_fil": 2, "catchment_geometri": [2, 3, 5], "set_foreshor": 2, "true": [2, 5], "exclusion_ext": [2, 3], "none": [2, 3, 5], "manag": 2, "refer": [2, 3, 5, 9], "background": [2, 5], "context": 2, "specif": [2, 3], "clip": [2, 3, 5], "land": [2, 3, 5], "foreshor": [2, 3], "There": 2, "outsid": [2, 3], "lidar": [2, 3, 4, 5], "us": [2, 3, 5], "input": 2, "posit": 2, "zero": 2, "catchmentgeometri": [2, 3, 5], "over": 2, "region": [2, 3, 5], "largest": 2, "dimens": 2, "extent": [2, 3, 5], "filter": [2, 3], "__del__": 2, "memori": 2, "netcdf": [2, 5], "properli": 2, "freed": 2, "dembas": 2, "abc": [2, 5], "abstract": [2, 5], "dens": [2, 3], "made": 2, "up": 2, "offshor": [2, 3, 5], "interpol": [2, 3, 5], "bathymetri": [2, 3, 4, 5], "contour": [2, 3, 4, 5], "tile": [2, 3, 5], "spatial": 2, "refern": 2, "alreadi": [2, 5], "hydrologicallyconditioneddem": 2, "raw_dem_path": 2, "extents_path": 2, "interpolation_method": 2, "yet": 2, "have": [2, 3, 5], "behaviour": [2, 5], "logic": [2, 5], "control": [2, 5], "method": [2, 3, 5], "linear": 2, "nearest": 2, "cubic": 2, "union": [2, 3], "str": [2, 3, 5], "pathlib": [2, 3, 5], "combine_dem_part": 2, "layer": [2, 5], "exist": [2, 5], "interpolate_bathymetry_point": 2, "bathymetry_point": 2, "flat_x_arrai": 2, "flat_y_arrai": 2, "locat": 2, "interpolate_ocean_bathymetri": 2, "bathy_contour": [2, 5], "perform": [2, 3], "scipi": 2, "rbf": 2, "interpolate_river_bathymetri": 2, "estimated_bathymetri": 2, "drain": [2, 5], "culvert": [2, 5], "fan": [2, 3, 5], "variou": [2, 5], "techniqu": 2, "estimatedbathymetrypoint": [2, 3], "lidarbas": 2, "elevation_rang": 2, "some": 2, "read": [2, 4, 5], "list": [2, 3, 5], "add_lidar": 2, "lidar_fil": 2, "tile_index_fil": [2, 5], "lidar_classifications_to_keep": 2, "source_cr": 2, "metadata": [2, 5], "coordin": [2, 5], "system": [2, 5], "chunk": 2, "size": 2, "pixel": 2, "parallel": 2, "stage": 2, "classif": 2, "keep": 2, "9": 2, "see": [2, 3, 5], "http": 2, "www": 2, "aspr": 2, "org": 2, "wp": 2, "upload": 2, "2010": 2, "12": 2, "las_1_4_r13": 2, "pdf": 2, "standard": 2, "meta_data": 2, "rawdem": 2, "lidar_interpolation_method": 2, "drop_offshore_lidar": 2, "creation": 2, "raw": [2, 5], "onli": [2, 5], "optition": 2, "dure": [2, 3], "downsampl": 2, "averag": 2, "mean": 2, "median": 2, "idw": 2, "max": 2, "min": 2, "std": 2, "where": [2, 3, 5], "add_reference_dem": 2, "reference_dem": [2, 5], "fill": [2, 5], "gap": [2, 5], "current": [2, 5, 8], "mai": [2, 3, 5], "requir": [2, 5], "larg": 2, "cover": 2, "roughnessdem": 2, "hydrological_dem_path": 2, "rough": [2, 5], "zo": 2, "hydrolog": [2, 4, 5], "condit": [2, 4, 5], "classifi": 2, "emper": 2, "can": [2, 3, 5], "constructor": 2, "cloud": 2, "distribut": 2, "source_class": 2, "hydrologiaclli": 2, "across": 2, "read_file_with_pd": 2, "region_to_til": 2, "get_ext": 2, "pdal": 2, "roughness_from_point": 2, "point_cloud": 2, "xy_out": 2, "xy_ground": 2, "ep": 2, "0": 2, "leaf_siz": 2, "10": 2, "invers": 2, "weigh": 2, "implement": 2, "kdtree": 2, "elevation_from_point": 2, "calculate_idw": 2, "near_indic": 2, "tree": 2, "power": 2, "calculate_linear": 2, "co": 2, "too": 2, "few": 2, "load_tiles_in_chunk": 2, "dim_x": 2, "dim_i": 2, "tile_index_ext": 2, "tile_index_name_column": 2, "chunk_region_to_til": 2, "rasteris": 2, "roughness_over_chunk": 2, "tile_point": 2, "elevation_over_chunk": 2, "delayed_roughness_over_chunk": 2, "wrap": 2, "rasterise_chunk": 2, "routin": 2, "dask": 2, "delai": 2, "delayed_elevation_over_chunk": 2, "manipul": [3, 4], "vector": [3, 4, 5], "catchment_fil": 3, "cr": [3, 5], "foreshore_buff": 3, "revel": 3, "dictionari": [3, 5], "epsg": [3, 5], "code": [3, 5], "horizont": [3, 5], "vertic": [3, 5], "datum": 3, "like": 3, "do": 3, "overlap": 3, "x": 3, "buffer": [3, 5], "remain": 3, "It": 3, "support": [3, 5], "function": [3, 5], "how": 3, "much": 3, "exclus": 3, "zone": 3, "lidar_ext": 3, "land_and_foreshore_without_lidar": 3, "exampl": [3, 5], "initalis": 3, "must": 3, "etc": [3, 5], "access": [3, 5], "full_land": 3, "full": 3, "land_and_foreshor": 3, "foreshore_and_offshor": 3, "dense_ext": 3, "without": 3, "offshore_without_lidar": 3, "offshore_dense_data_edg": 3, "edg": 3, "offshore_no_dense_data": 3, "bathymetrycontour": 3, "contour_fil": 3, "z_label": 3, "assum": 3, "sample_contour": 3, "marinebathymetrypoint": 3, "points_fil": 3, "acces": 3, "marin": 3, "These": 3, "depth": [3, 5], "y": 3, "polygon_fil": 3, "type_label": 3, "mouth": [3, 5], "pair": 3, "filtered_polygon": 3, "label": 3, "filtered_point": 3, "arrai": 3, "filtered_bank_height_point": 3, "being": 3, "tileinfo": 3, "tile_fil": 3, "tile_nam": 3, "rivermouthfan": 3, "aligned_channel_fil": 3, "river_bathymetry_fil": 3, "ocean_contour_fil": 3, "ocean_contour_depth_label": 3, "transit": 3, "ocean": [3, 5], "coast": 3, "shape": [3, 5], "15": 3, "degre": 3, "most": 3, "first": [3, 5], "either": [3, 5], "more": 3, "2x": 3, "aim": 3, "slightli": 3, "deeper": 3, "surround": [3, 5], "cacul": 3, "both": 3, "todo": 3, "In": [3, 5], "futur": 3, "move": 3, "10x": 3, "deal": 3, "2193": 3, "m": 3, "thefil": 3, "column": 3, "polygon_and_bathymetri": 3, "rive": 3, "so": 3, "bathyemtri": 3, "packag": [4, 6], "give": 4, "modul": [4, 9], "processor": [4, 7, 8], "overal": 4, "bathymetry_estim": [4, 5, 7], "version": [4, 7], "baseprocessor": [5, 8], "json_instruct": 5, "element": 5, "popul": 5, "default": 5, "download": 5, "remot": 5, "geopai": 5, "create_metadata": 5, "clase": 5, "attribut": 5, "get_instruction_path": 5, "kei": 5, "local": 5, "cach": 5, "rais": 5, "error": 5, "check_instruction_path": 5, "create_results_fold": 5, "result": [5, 8], "folder": 5, "get_resolut": 5, "get_cr": 5, "project": 5, "horizton": 5, "output": 5, "one": [5, 8], "miss": 5, "get_instruction_gener": 5, "get_processing_instruct": 5, "check_api": 5, "api": [5, 9], "check_vector": 5, "bathymetry_contour": 5, "": [5, 8], "linz": 5, "lri": 5, "get_vector_path": 5, "get": 5, "case": 5, "fetch": 5, "well": 5, "get_lidar_dataset_cr": 5, "data_servic": 5, "dataset_nam": 5, "sourc": 5, "later": 5, "overrid": 5, "encod": 5, "la": 5, "get_lidar_file_list": 5, "three": 5, "enti": 5, "file_path": 5, "unset": 5, "correctli": 5, "laz": 5, "opentopographi": 5, "data_path": 5, "flow": 5, "rawlidardemgener": 5, "demgener": 5, "sever": 5, "import": 5, "member": 5, "relev": 5, "raw_dem": 5, "referecnc": 5, "readm": 5, "md": 5, "usag": 5, "test": 5, "produc": 5, "deriv": 5, "note": 5, "consid": 5, "chang": 5, "hydrologicdemgener": 5, "incorpor": 5, "hydrologic_dem": 5, "add_bathymetri": 5, "catchment_dir": 5, "roughnesslengthgener": 5, "roughness_dem": 5, "riverbathymetrygener": 5, "friction": 5, "done": 5, "channel_polylin": 5, "gen_dem": 5, "raster": 5, "veget": 5, "aligned_channel_polylin": 5, "its": 5, "updat": 5, "perpindicular": 5, "channel_characteristics_exist": 5, "channel_bathymetry_exist": 5, "alignment_exist": 5, "get_result_file_nam": 5, "get_result_file_path": 5, "get_bathymetry_instruct": 5, "get_rec_channel": 5, "get_dem": 5, "allow": 5, "tupl": 5, "channel_width": 5, "calculate_channel_characterist": 5, "characterise_channel": 5, "extra": 5, "around": 5, "align_channel_from_rec": 5, "align_channel_from_osm": 5, "calculate_river_bed_elev": 5, "estimate_river_mouth_fan": 5, "extract": 5, "extim": 5, "eventu": 5, "waterwaybedelevationestim": 5, "drainbathymetrygener": 5, "pull": 5, "openstreetmap": 5, "waterwai": 5, "tunnel": 5, "unblock": 5, "lowest": 5, "opn": 5, "downhil": 5, "waterway_elevations_exist": 5, "bathymeti": 5, "minimum_elevation_in_polygon": 5, "bound": 5, "box": 5, "estimate_closed_elev": 5, "estimate_open_elev": 5, "open": 5, "enforc": 5, "decreas": 5, "create_dem": 5, "5x": 5, "download_osm_valu": 5, "bbox": 5, "featur": 5, "page": [7, 9], "auto": 7, "document": 7, "benchmark": [7, 8, 9], "sphinx": 7, "autoapi": 7, "setup_logging_for_run": 8, "setup": 8, "log": 8, "check_for_benchmark": 8, "runner": 8, "compar": 8, "against": 8, "launch_processor": 8}, "objects": {"": [[0, 0, 0, "-", "benchmarking"], [4, 0, 0, "-", "geofabrics"], [8, 0, 0, "-", "main"]], "benchmarking": [[0, 1, 1, "", "benchmark_processing"], [0, 1, 1, "", "main"], [0, 1, 1, "", "parse_args"]], "geofabrics": [[1, 0, 0, "-", "bathymetry_estimation"], [2, 0, 0, "-", "dem"], [3, 0, 0, "-", "geometry"], [5, 0, 0, "-", "processor"], [6, 0, 0, "-", "version"]], "geofabrics.bathymetry_estimation": [[1, 2, 1, "", "Channel"], [1, 2, 1, "", "ChannelCharacteristics"]], "geofabrics.bathymetry_estimation.Channel": [[1, 3, 1, "", "from_rec"], [1, 3, 1, "", "get_channel_catchment"], [1, 3, 1, "", "get_sampled_spline_fit"], [1, 3, 1, "", "get_smoothed_spline_fit"], [1, 3, 1, "", "get_spaced_points"], [1, 3, 1, "", "get_spaced_points_with_corners"]], "geofabrics.bathymetry_estimation.ChannelCharacteristics": [[1, 3, 1, "", "align_channel"], [1, 3, 1, "", "calculate_min_z_start_i"], [1, 3, 1, "", "calculate_min_z_stop_i"], [1, 4, 1, "", "centre_index"], [1, 3, 1, "", "estimate_width_and_slope"], [1, 3, 1, "", "fixed_threshold_width"], [1, 3, 1, "", "fixed_threshold_width_backwards"], [1, 3, 1, "", "fixed_threshold_width_forwards"], [1, 3, 1, "", "fixed_threshold_width_outwards"], [1, 3, 1, "", "fixed_thresholded_widths_from_centre_within_radius"], [1, 3, 1, "", "node_centred_reach_cross_section"], [1, 4, 1, "", "number_of_samples"], [1, 3, 1, "", "sample_cross_sections"], [1, 3, 1, "", "variable_thresholded_widths_from_centre_within_radius"]], "geofabrics.dem": [[2, 2, 1, "", "DemBase"], [2, 2, 1, "", "HydrologicallyConditionedDem"], [2, 2, 1, "", "LidarBase"], [2, 2, 1, "", "RawDem"], [2, 2, 1, "", "ReferenceDem"], [2, 2, 1, "", "RoughnessDem"], [2, 1, 1, "", "calculate_idw"], [2, 1, 1, "", "calculate_linear"], [2, 5, 1, "", "delayed_elevation_over_chunk"], [2, 5, 1, "", "delayed_roughness_over_chunk"], [2, 1, 1, "", "elevation_from_points"], [2, 1, 1, "", "elevation_over_chunk"], [2, 1, 1, "", "load_tiles_in_chunk"], [2, 1, 1, "", "read_file_with_pdal"], [2, 1, 1, "", "roughness_from_points"], [2, 1, 1, "", "roughness_over_chunk"]], "geofabrics.dem.DemBase": [[2, 4, 1, "", "dem"], [2, 4, 1, "", "extents"]], "geofabrics.dem.HydrologicallyConditionedDem": [[2, 3, 1, "", "__del__"], [2, 3, 1, "", "combine_dem_parts"], [2, 4, 1, "", "dem"], [2, 3, 1, "", "interpolate_bathymetry_points"], [2, 3, 1, "", "interpolate_ocean_bathymetry"], [2, 3, 1, "", "interpolate_river_bathymetry"]], "geofabrics.dem.LidarBase": [[2, 3, 1, "", "__del__"], [2, 3, 1, "", "add_lidar"], [2, 4, 1, "", "dem"]], "geofabrics.dem.RawDem": [[2, 3, 1, "", "add_lidar"], [2, 3, 1, "", "add_reference_dem"]], "geofabrics.dem.ReferenceDem": [[2, 3, 1, "", "__del__"], [2, 4, 1, "", "dem"], [2, 4, 1, "", "extents"], [2, 4, 1, "", "points"], [2, 4, 1, "", "resolution"]], "geofabrics.dem.RoughnessDem": [[2, 3, 1, "", "add_lidar"]], "geofabrics.geometry": [[3, 2, 1, "", "BathymetryContours"], [3, 2, 1, "", "CatchmentGeometry"], [3, 2, 1, "", "EstimatedBathymetryPoints"], [3, 2, 1, "", "MarineBathymetryPoints"], [3, 2, 1, "", "RiverMouthFan"], [3, 2, 1, "", "TileInfo"]], "geofabrics.geometry.BathymetryContours": [[3, 3, 1, "", "sample_contours"]], "geofabrics.geometry.CatchmentGeometry": [[3, 4, 1, "", "catchment"], [3, 4, 1, "", "foreshore"], [3, 4, 1, "", "foreshore_and_offshore"], [3, 4, 1, "", "full_land"], [3, 4, 1, "", "land"], [3, 4, 1, "", "land_and_foreshore"], [3, 3, 1, "", "land_and_foreshore_without_lidar"], [3, 4, 1, "", "offshore"], [3, 3, 1, "", "offshore_dense_data_edge"], [3, 3, 1, "", "offshore_no_dense_data"], [3, 3, 1, "", "offshore_without_lidar"]], "geofabrics.geometry.EstimatedBathymetryPoints": [[3, 3, 1, "", "filtered_bank_height_points"], [3, 3, 1, "", "filtered_points"], [3, 3, 1, "", "filtered_polygons"], [3, 4, 1, "", "points"], [3, 4, 1, "", "x"], [3, 4, 1, "", "y"], [3, 4, 1, "", "z"]], "geofabrics.geometry.MarineBathymetryPoints": [[3, 4, 1, "", "points"], [3, 4, 1, "", "x"], [3, 4, 1, "", "y"], [3, 4, 1, "", "z"]], "geofabrics.geometry.RiverMouthFan": [[3, 3, 1, "", "polygon_and_bathymetry"]], "geofabrics.geometry.TileInfo": [[3, 4, 1, "", "tile_names"]], "geofabrics.processor": [[5, 2, 1, "", "BaseProcessor"], [5, 2, 1, "", "HydrologicDemGenerator"], [5, 2, 1, "", "RawLidarDemGenerator"], [5, 2, 1, "", "RiverBathymetryGenerator"], [5, 2, 1, "", "RoughnessLengthGenerator"], [5, 2, 1, "", "WaterwayBedElevationEstimator"]], "geofabrics.processor.BaseProcessor": [[5, 3, 1, "", "check_apis"], [5, 3, 1, "", "check_instruction_path"], [5, 3, 1, "", "check_vector"], [5, 3, 1, "", "create_metadata"], [5, 3, 1, "", "create_results_folder"], [5, 3, 1, "", "get_crs"], [5, 3, 1, "", "get_instruction_general"], [5, 3, 1, "", "get_instruction_path"], [5, 3, 1, "", "get_lidar_dataset_crs"], [5, 3, 1, "", "get_lidar_file_list"], [5, 3, 1, "", "get_processing_instructions"], [5, 3, 1, "", "get_resolution"], [5, 3, 1, "", "get_vector_paths"], [5, 3, 1, "", "run"]], "geofabrics.processor.HydrologicDemGenerator": [[5, 3, 1, "", "add_bathymetry"], [5, 3, 1, "", "run"]], "geofabrics.processor.RawLidarDemGenerator": [[5, 3, 1, "", "run"]], "geofabrics.processor.RiverBathymetryGenerator": [[5, 3, 1, "", "align_channel"], [5, 3, 1, "", "align_channel_from_osm"], [5, 3, 1, "", "align_channel_from_rec"], [5, 3, 1, "", "alignment_exists"], [5, 3, 1, "", "calculate_channel_characteristics"], [5, 3, 1, "", "calculate_river_bed_elevations"], [5, 3, 1, "", "channel_bathymetry_exist"], [5, 3, 1, "", "channel_characteristics_exist"], [5, 3, 1, "", "characterise_channel"], [5, 3, 1, "", "estimate_river_mouth_fan"], [5, 3, 1, "", "get_bathymetry_instruction"], [5, 3, 1, "", "get_dems"], [5, 3, 1, "", "get_rec_channel"], [5, 3, 1, "", "get_result_file_name"], [5, 3, 1, "", "get_result_file_path"], [5, 3, 1, "", "run"]], "geofabrics.processor.RoughnessLengthGenerator": [[5, 3, 1, "", "run"]], "geofabrics.processor.WaterwayBedElevationEstimator": [[5, 3, 1, "", "create_dem"], [5, 3, 1, "", "download_osm_values"], [5, 3, 1, "", "estimate_closed_elevations"], [5, 3, 1, "", "estimate_open_elevations"], [5, 3, 1, "", "get_result_file_name"], [5, 3, 1, "", "get_result_file_path"], [5, 3, 1, "", "minimum_elevation_in_polygon"], [5, 3, 1, "", "run"], [5, 3, 1, "", "waterway_elevations_exists"]], "main": [[8, 1, 1, "", "check_for_benchmarks"], [8, 1, 1, "", "launch_processor"], [8, 1, 1, "", "main"], [8, 1, 1, "", "parse_args"], [8, 1, 1, "", "setup_logging_for_run"]]}, "objtypes": {"0": "py:module", "1": "py:function", "2": "py:class", "3": "py:method", "4": "py:property", "5": "py:data"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "function", "Python function"], "2": ["py", "class", "Python class"], "3": ["py", "method", "Python method"], "4": ["py", "property", "Python property"], "5": ["py", "data", "Python data"]}, "titleterms": {"benchmark": 0, "modul": [0, 1, 2, 3, 5, 8], "content": [0, 1, 2, 3, 5, 8], "function": [0, 2, 8], "geofabr": [1, 2, 3, 4, 5, 6, 9], "bathymetry_estim": 1, "class": [1, 2, 3, 5], "dem": 2, "attribut": 2, "geometri": 3, "submodul": 4, "processor": 5, "version": 6, "api": 7, "refer": 7, "main": 8, "welcom": 9, "": 9, "document": 9, "indic": 9, "tabl": 9}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"benchmarking": [[0, "module-benchmarking"]], "Module Contents": [[0, "module-contents"], [1, "module-contents"], [2, "module-contents"], [3, "module-contents"], [5, "module-contents"], [8, "module-contents"]], "Functions": [[0, "functions"], [2, "functions"], [8, "functions"]], "geofabrics.bathymetry_estimation": [[1, "module-geofabrics.bathymetry_estimation"]], "Classes": [[1, "classes"], [2, "classes"], [3, "classes"], [5, "classes"]], "geofabrics.dem": [[2, "module-geofabrics.dem"]], "Attributes": [[2, "attributes"]], "geofabrics.geometry": [[3, "module-geofabrics.geometry"]], "geofabrics": [[4, "module-geofabrics"]], "Submodules": [[4, "submodules"]], "geofabrics.processor": [[5, "module-geofabrics.processor"]], "geofabrics.version": [[6, "module-geofabrics.version"]], "API Reference": [[7, "api-reference"]], "main": [[8, "module-main"]], "Welcome to Geofabrics\u2019s documentation!": [[9, "welcome-to-geofabrics-s-documentation"]], "Indices and tables": [[9, "indices-and-tables"]]}, "indexentries": {"benchmark_processing() (in module benchmarking)": [[0, "benchmarking.benchmark_processing"]], "benchmarking": [[0, "module-benchmarking"]], "main() (in module benchmarking)": [[0, "benchmarking.main"]], "module": [[0, "module-benchmarking"], [1, "module-geofabrics.bathymetry_estimation"], [2, "module-geofabrics.dem"], [3, "module-geofabrics.geometry"], [4, "module-geofabrics"], [5, "module-geofabrics.processor"], [6, "module-geofabrics.version"], [8, "module-main"]], "parse_args() (in module benchmarking)": [[0, "benchmarking.parse_args"]], "channel (class in geofabrics.bathymetry_estimation)": [[1, "geofabrics.bathymetry_estimation.Channel"]], "channelcharacteristics (class in geofabrics.bathymetry_estimation)": [[1, "geofabrics.bathymetry_estimation.ChannelCharacteristics"]], "align_channel() (geofabrics.bathymetry_estimation.channelcharacteristics method)": [[1, "geofabrics.bathymetry_estimation.ChannelCharacteristics.align_channel"]], "calculate_min_z_start_i() (geofabrics.bathymetry_estimation.channelcharacteristics method)": [[1, "geofabrics.bathymetry_estimation.ChannelCharacteristics.calculate_min_z_start_i"]], "calculate_min_z_stop_i() (geofabrics.bathymetry_estimation.channelcharacteristics method)": [[1, "geofabrics.bathymetry_estimation.ChannelCharacteristics.calculate_min_z_stop_i"]], "centre_index (geofabrics.bathymetry_estimation.channelcharacteristics property)": [[1, "geofabrics.bathymetry_estimation.ChannelCharacteristics.centre_index"]], "estimate_width_and_slope() (geofabrics.bathymetry_estimation.channelcharacteristics method)": [[1, "geofabrics.bathymetry_estimation.ChannelCharacteristics.estimate_width_and_slope"]], "fixed_threshold_width() (geofabrics.bathymetry_estimation.channelcharacteristics method)": [[1, "geofabrics.bathymetry_estimation.ChannelCharacteristics.fixed_threshold_width"]], "fixed_threshold_width_backwards() (geofabrics.bathymetry_estimation.channelcharacteristics method)": [[1, "geofabrics.bathymetry_estimation.ChannelCharacteristics.fixed_threshold_width_backwards"]], "fixed_threshold_width_forwards() (geofabrics.bathymetry_estimation.channelcharacteristics method)": [[1, "geofabrics.bathymetry_estimation.ChannelCharacteristics.fixed_threshold_width_forwards"]], "fixed_threshold_width_outwards() (geofabrics.bathymetry_estimation.channelcharacteristics method)": [[1, "geofabrics.bathymetry_estimation.ChannelCharacteristics.fixed_threshold_width_outwards"]], "fixed_thresholded_widths_from_centre_within_radius() (geofabrics.bathymetry_estimation.channelcharacteristics method)": [[1, "geofabrics.bathymetry_estimation.ChannelCharacteristics.fixed_thresholded_widths_from_centre_within_radius"]], "from_rec() (geofabrics.bathymetry_estimation.channel class method)": [[1, "geofabrics.bathymetry_estimation.Channel.from_rec"]], "geofabrics.bathymetry_estimation": [[1, "module-geofabrics.bathymetry_estimation"]], "get_channel_catchment() (geofabrics.bathymetry_estimation.channel method)": [[1, "geofabrics.bathymetry_estimation.Channel.get_channel_catchment"]], "get_sampled_spline_fit() (geofabrics.bathymetry_estimation.channel method)": [[1, "geofabrics.bathymetry_estimation.Channel.get_sampled_spline_fit"]], "get_smoothed_spline_fit() (geofabrics.bathymetry_estimation.channel method)": [[1, "geofabrics.bathymetry_estimation.Channel.get_smoothed_spline_fit"]], "get_spaced_points() (geofabrics.bathymetry_estimation.channel method)": [[1, "geofabrics.bathymetry_estimation.Channel.get_spaced_points"]], "get_spaced_points_with_corners() (geofabrics.bathymetry_estimation.channel method)": [[1, "geofabrics.bathymetry_estimation.Channel.get_spaced_points_with_corners"]], "node_centred_reach_cross_section() (geofabrics.bathymetry_estimation.channelcharacteristics method)": [[1, "geofabrics.bathymetry_estimation.ChannelCharacteristics.node_centred_reach_cross_section"]], "number_of_samples (geofabrics.bathymetry_estimation.channelcharacteristics property)": [[1, "geofabrics.bathymetry_estimation.ChannelCharacteristics.number_of_samples"]], "sample_cross_sections() (geofabrics.bathymetry_estimation.channelcharacteristics method)": [[1, "geofabrics.bathymetry_estimation.ChannelCharacteristics.sample_cross_sections"]], "variable_thresholded_widths_from_centre_within_radius() (geofabrics.bathymetry_estimation.channelcharacteristics method)": [[1, "geofabrics.bathymetry_estimation.ChannelCharacteristics.variable_thresholded_widths_from_centre_within_radius"]], "dembase (class in geofabrics.dem)": [[2, "geofabrics.dem.DemBase"]], "hydrologicallyconditioneddem (class in geofabrics.dem)": [[2, "geofabrics.dem.HydrologicallyConditionedDem"]], "lidarbase (class in geofabrics.dem)": [[2, "geofabrics.dem.LidarBase"]], "rawdem (class in geofabrics.dem)": [[2, "geofabrics.dem.RawDem"]], "referencedem (class in geofabrics.dem)": [[2, "geofabrics.dem.ReferenceDem"]], "roughnessdem (class in geofabrics.dem)": [[2, "geofabrics.dem.RoughnessDem"]], "__del__() (geofabrics.dem.hydrologicallyconditioneddem method)": [[2, "geofabrics.dem.HydrologicallyConditionedDem.__del__"]], "__del__() (geofabrics.dem.lidarbase method)": [[2, "geofabrics.dem.LidarBase.__del__"]], "__del__() (geofabrics.dem.referencedem method)": [[2, "geofabrics.dem.ReferenceDem.__del__"]], "add_lidar() (geofabrics.dem.lidarbase method)": [[2, "geofabrics.dem.LidarBase.add_lidar"]], "add_lidar() (geofabrics.dem.rawdem method)": [[2, "geofabrics.dem.RawDem.add_lidar"]], "add_lidar() (geofabrics.dem.roughnessdem method)": [[2, "geofabrics.dem.RoughnessDem.add_lidar"]], "add_reference_dem() (geofabrics.dem.rawdem method)": [[2, "geofabrics.dem.RawDem.add_reference_dem"]], "calculate_idw() (in module geofabrics.dem)": [[2, "geofabrics.dem.calculate_idw"]], "calculate_linear() (in module geofabrics.dem)": [[2, "geofabrics.dem.calculate_linear"]], "combine_dem_parts() (geofabrics.dem.hydrologicallyconditioneddem method)": [[2, "geofabrics.dem.HydrologicallyConditionedDem.combine_dem_parts"]], "delayed_elevation_over_chunk (in module geofabrics.dem)": [[2, "geofabrics.dem.delayed_elevation_over_chunk"]], "delayed_roughness_over_chunk (in module geofabrics.dem)": [[2, "geofabrics.dem.delayed_roughness_over_chunk"]], "dem (geofabrics.dem.dembase property)": [[2, "geofabrics.dem.DemBase.dem"]], "dem (geofabrics.dem.hydrologicallyconditioneddem property)": [[2, "geofabrics.dem.HydrologicallyConditionedDem.dem"]], "dem (geofabrics.dem.lidarbase property)": [[2, "geofabrics.dem.LidarBase.dem"]], "dem (geofabrics.dem.referencedem property)": [[2, "geofabrics.dem.ReferenceDem.dem"]], "elevation_from_points() (in module geofabrics.dem)": [[2, "geofabrics.dem.elevation_from_points"]], "elevation_over_chunk() (in module geofabrics.dem)": [[2, "geofabrics.dem.elevation_over_chunk"]], "extents (geofabrics.dem.dembase property)": [[2, "geofabrics.dem.DemBase.extents"]], "extents (geofabrics.dem.referencedem property)": [[2, "geofabrics.dem.ReferenceDem.extents"]], "geofabrics.dem": [[2, "module-geofabrics.dem"]], "interpolate_bathymetry_points() (geofabrics.dem.hydrologicallyconditioneddem method)": [[2, "geofabrics.dem.HydrologicallyConditionedDem.interpolate_bathymetry_points"]], "interpolate_ocean_bathymetry() (geofabrics.dem.hydrologicallyconditioneddem method)": [[2, "geofabrics.dem.HydrologicallyConditionedDem.interpolate_ocean_bathymetry"]], "interpolate_river_bathymetry() (geofabrics.dem.hydrologicallyconditioneddem method)": [[2, "geofabrics.dem.HydrologicallyConditionedDem.interpolate_river_bathymetry"]], "load_tiles_in_chunk() (in module geofabrics.dem)": [[2, "geofabrics.dem.load_tiles_in_chunk"]], "points (geofabrics.dem.referencedem property)": [[2, "geofabrics.dem.ReferenceDem.points"]], "read_file_with_pdal() (in module geofabrics.dem)": [[2, "geofabrics.dem.read_file_with_pdal"]], "resolution (geofabrics.dem.referencedem property)": [[2, "geofabrics.dem.ReferenceDem.resolution"]], "roughness_from_points() (in module geofabrics.dem)": [[2, "geofabrics.dem.roughness_from_points"]], "roughness_over_chunk() (in module geofabrics.dem)": [[2, "geofabrics.dem.roughness_over_chunk"]], "bathymetrycontours (class in geofabrics.geometry)": [[3, "geofabrics.geometry.BathymetryContours"]], "catchmentgeometry (class in geofabrics.geometry)": [[3, "geofabrics.geometry.CatchmentGeometry"]], "estimatedbathymetrypoints (class in geofabrics.geometry)": [[3, "geofabrics.geometry.EstimatedBathymetryPoints"]], "marinebathymetrypoints (class in geofabrics.geometry)": [[3, "geofabrics.geometry.MarineBathymetryPoints"]], "rivermouthfan (class in geofabrics.geometry)": [[3, "geofabrics.geometry.RiverMouthFan"]], "tileinfo (class in geofabrics.geometry)": [[3, "geofabrics.geometry.TileInfo"]], "catchment (geofabrics.geometry.catchmentgeometry property)": [[3, "geofabrics.geometry.CatchmentGeometry.catchment"]], "filtered_bank_height_points() (geofabrics.geometry.estimatedbathymetrypoints method)": [[3, "geofabrics.geometry.EstimatedBathymetryPoints.filtered_bank_height_points"]], "filtered_points() (geofabrics.geometry.estimatedbathymetrypoints method)": [[3, "geofabrics.geometry.EstimatedBathymetryPoints.filtered_points"]], "filtered_polygons() (geofabrics.geometry.estimatedbathymetrypoints method)": [[3, "geofabrics.geometry.EstimatedBathymetryPoints.filtered_polygons"]], "foreshore (geofabrics.geometry.catchmentgeometry property)": [[3, "geofabrics.geometry.CatchmentGeometry.foreshore"]], "foreshore_and_offshore (geofabrics.geometry.catchmentgeometry property)": [[3, "geofabrics.geometry.CatchmentGeometry.foreshore_and_offshore"]], "full_land (geofabrics.geometry.catchmentgeometry property)": [[3, "geofabrics.geometry.CatchmentGeometry.full_land"]], "geofabrics.geometry": [[3, "module-geofabrics.geometry"]], "land (geofabrics.geometry.catchmentgeometry property)": [[3, "geofabrics.geometry.CatchmentGeometry.land"]], "land_and_foreshore (geofabrics.geometry.catchmentgeometry property)": [[3, "geofabrics.geometry.CatchmentGeometry.land_and_foreshore"]], "land_and_foreshore_without_lidar() (geofabrics.geometry.catchmentgeometry method)": [[3, "geofabrics.geometry.CatchmentGeometry.land_and_foreshore_without_lidar"]], "offshore (geofabrics.geometry.catchmentgeometry property)": [[3, "geofabrics.geometry.CatchmentGeometry.offshore"]], "offshore_dense_data_edge() (geofabrics.geometry.catchmentgeometry method)": [[3, "geofabrics.geometry.CatchmentGeometry.offshore_dense_data_edge"]], "offshore_no_dense_data() (geofabrics.geometry.catchmentgeometry method)": [[3, "geofabrics.geometry.CatchmentGeometry.offshore_no_dense_data"]], "offshore_without_lidar() (geofabrics.geometry.catchmentgeometry method)": [[3, "geofabrics.geometry.CatchmentGeometry.offshore_without_lidar"]], "points (geofabrics.geometry.estimatedbathymetrypoints property)": [[3, "geofabrics.geometry.EstimatedBathymetryPoints.points"]], "points (geofabrics.geometry.marinebathymetrypoints property)": [[3, "geofabrics.geometry.MarineBathymetryPoints.points"]], "polygon_and_bathymetry() (geofabrics.geometry.rivermouthfan method)": [[3, "geofabrics.geometry.RiverMouthFan.polygon_and_bathymetry"]], "sample_contours() (geofabrics.geometry.bathymetrycontours method)": [[3, "geofabrics.geometry.BathymetryContours.sample_contours"]], "tile_names (geofabrics.geometry.tileinfo property)": [[3, "geofabrics.geometry.TileInfo.tile_names"]], "x (geofabrics.geometry.estimatedbathymetrypoints property)": [[3, "geofabrics.geometry.EstimatedBathymetryPoints.x"]], "x (geofabrics.geometry.marinebathymetrypoints property)": [[3, "geofabrics.geometry.MarineBathymetryPoints.x"]], "y (geofabrics.geometry.estimatedbathymetrypoints property)": [[3, "geofabrics.geometry.EstimatedBathymetryPoints.y"]], "y (geofabrics.geometry.marinebathymetrypoints property)": [[3, "geofabrics.geometry.MarineBathymetryPoints.y"]], "z (geofabrics.geometry.estimatedbathymetrypoints property)": [[3, "geofabrics.geometry.EstimatedBathymetryPoints.z"]], "z (geofabrics.geometry.marinebathymetrypoints property)": [[3, "geofabrics.geometry.MarineBathymetryPoints.z"]], "geofabrics": [[4, "module-geofabrics"]], "baseprocessor (class in geofabrics.processor)": [[5, "geofabrics.processor.BaseProcessor"]], "hydrologicdemgenerator (class in geofabrics.processor)": [[5, "geofabrics.processor.HydrologicDemGenerator"]], "rawlidardemgenerator (class in geofabrics.processor)": [[5, "geofabrics.processor.RawLidarDemGenerator"]], "riverbathymetrygenerator (class in geofabrics.processor)": [[5, "geofabrics.processor.RiverBathymetryGenerator"]], "roughnesslengthgenerator (class in geofabrics.processor)": [[5, "geofabrics.processor.RoughnessLengthGenerator"]], "waterwaybedelevationestimator (class in geofabrics.processor)": [[5, "geofabrics.processor.WaterwayBedElevationEstimator"]], "add_bathymetry() (geofabrics.processor.hydrologicdemgenerator method)": [[5, "geofabrics.processor.HydrologicDemGenerator.add_bathymetry"]], "align_channel() (geofabrics.processor.riverbathymetrygenerator method)": [[5, "geofabrics.processor.RiverBathymetryGenerator.align_channel"]], "align_channel_from_osm() (geofabrics.processor.riverbathymetrygenerator method)": [[5, "geofabrics.processor.RiverBathymetryGenerator.align_channel_from_osm"]], "align_channel_from_rec() (geofabrics.processor.riverbathymetrygenerator method)": [[5, "geofabrics.processor.RiverBathymetryGenerator.align_channel_from_rec"]], "alignment_exists() (geofabrics.processor.riverbathymetrygenerator method)": [[5, "geofabrics.processor.RiverBathymetryGenerator.alignment_exists"]], "calculate_channel_characteristics() (geofabrics.processor.riverbathymetrygenerator method)": [[5, "geofabrics.processor.RiverBathymetryGenerator.calculate_channel_characteristics"]], "calculate_river_bed_elevations() (geofabrics.processor.riverbathymetrygenerator method)": [[5, "geofabrics.processor.RiverBathymetryGenerator.calculate_river_bed_elevations"]], "channel_bathymetry_exist() (geofabrics.processor.riverbathymetrygenerator method)": [[5, "geofabrics.processor.RiverBathymetryGenerator.channel_bathymetry_exist"]], "channel_characteristics_exist() (geofabrics.processor.riverbathymetrygenerator method)": [[5, "geofabrics.processor.RiverBathymetryGenerator.channel_characteristics_exist"]], "characterise_channel() (geofabrics.processor.riverbathymetrygenerator method)": [[5, "geofabrics.processor.RiverBathymetryGenerator.characterise_channel"]], "check_apis() (geofabrics.processor.baseprocessor method)": [[5, "geofabrics.processor.BaseProcessor.check_apis"]], "check_instruction_path() (geofabrics.processor.baseprocessor method)": [[5, "geofabrics.processor.BaseProcessor.check_instruction_path"]], "check_vector() (geofabrics.processor.baseprocessor method)": [[5, "geofabrics.processor.BaseProcessor.check_vector"]], "create_dem() (geofabrics.processor.waterwaybedelevationestimator method)": [[5, "geofabrics.processor.WaterwayBedElevationEstimator.create_dem"]], "create_metadata() (geofabrics.processor.baseprocessor method)": [[5, "geofabrics.processor.BaseProcessor.create_metadata"]], "create_results_folder() (geofabrics.processor.baseprocessor method)": [[5, "geofabrics.processor.BaseProcessor.create_results_folder"]], "download_osm_values() (geofabrics.processor.waterwaybedelevationestimator method)": [[5, "geofabrics.processor.WaterwayBedElevationEstimator.download_osm_values"]], "estimate_closed_elevations() (geofabrics.processor.waterwaybedelevationestimator method)": [[5, "geofabrics.processor.WaterwayBedElevationEstimator.estimate_closed_elevations"]], "estimate_open_elevations() (geofabrics.processor.waterwaybedelevationestimator method)": [[5, "geofabrics.processor.WaterwayBedElevationEstimator.estimate_open_elevations"]], "estimate_river_mouth_fan() (geofabrics.processor.riverbathymetrygenerator method)": [[5, "geofabrics.processor.RiverBathymetryGenerator.estimate_river_mouth_fan"]], "geofabrics.processor": [[5, "module-geofabrics.processor"]], "get_bathymetry_instruction() (geofabrics.processor.riverbathymetrygenerator method)": [[5, "geofabrics.processor.RiverBathymetryGenerator.get_bathymetry_instruction"]], "get_crs() (geofabrics.processor.baseprocessor method)": [[5, "geofabrics.processor.BaseProcessor.get_crs"]], "get_dems() (geofabrics.processor.riverbathymetrygenerator method)": [[5, "geofabrics.processor.RiverBathymetryGenerator.get_dems"]], "get_instruction_general() (geofabrics.processor.baseprocessor method)": [[5, "geofabrics.processor.BaseProcessor.get_instruction_general"]], "get_instruction_path() (geofabrics.processor.baseprocessor method)": [[5, "geofabrics.processor.BaseProcessor.get_instruction_path"]], "get_lidar_dataset_crs() (geofabrics.processor.baseprocessor method)": [[5, "geofabrics.processor.BaseProcessor.get_lidar_dataset_crs"]], "get_lidar_file_list() (geofabrics.processor.baseprocessor method)": [[5, "geofabrics.processor.BaseProcessor.get_lidar_file_list"]], "get_processing_instructions() (geofabrics.processor.baseprocessor method)": [[5, "geofabrics.processor.BaseProcessor.get_processing_instructions"]], "get_rec_channel() (geofabrics.processor.riverbathymetrygenerator method)": [[5, "geofabrics.processor.RiverBathymetryGenerator.get_rec_channel"]], "get_resolution() (geofabrics.processor.baseprocessor method)": [[5, "geofabrics.processor.BaseProcessor.get_resolution"]], "get_result_file_name() (geofabrics.processor.riverbathymetrygenerator method)": [[5, "geofabrics.processor.RiverBathymetryGenerator.get_result_file_name"]], "get_result_file_name() (geofabrics.processor.waterwaybedelevationestimator method)": [[5, "geofabrics.processor.WaterwayBedElevationEstimator.get_result_file_name"]], "get_result_file_path() (geofabrics.processor.riverbathymetrygenerator method)": [[5, "geofabrics.processor.RiverBathymetryGenerator.get_result_file_path"]], "get_result_file_path() (geofabrics.processor.waterwaybedelevationestimator method)": [[5, "geofabrics.processor.WaterwayBedElevationEstimator.get_result_file_path"]], "get_vector_paths() (geofabrics.processor.baseprocessor method)": [[5, "geofabrics.processor.BaseProcessor.get_vector_paths"]], "minimum_elevation_in_polygon() (geofabrics.processor.waterwaybedelevationestimator method)": [[5, "geofabrics.processor.WaterwayBedElevationEstimator.minimum_elevation_in_polygon"]], "run() (geofabrics.processor.baseprocessor method)": [[5, "geofabrics.processor.BaseProcessor.run"]], "run() (geofabrics.processor.hydrologicdemgenerator method)": [[5, "geofabrics.processor.HydrologicDemGenerator.run"]], "run() (geofabrics.processor.rawlidardemgenerator method)": [[5, "geofabrics.processor.RawLidarDemGenerator.run"]], "run() (geofabrics.processor.riverbathymetrygenerator method)": [[5, "geofabrics.processor.RiverBathymetryGenerator.run"]], "run() (geofabrics.processor.roughnesslengthgenerator method)": [[5, "geofabrics.processor.RoughnessLengthGenerator.run"]], "run() (geofabrics.processor.waterwaybedelevationestimator method)": [[5, "geofabrics.processor.WaterwayBedElevationEstimator.run"]], "waterway_elevations_exists() (geofabrics.processor.waterwaybedelevationestimator method)": [[5, "geofabrics.processor.WaterwayBedElevationEstimator.waterway_elevations_exists"]], "geofabrics.version": [[6, "module-geofabrics.version"]], "check_for_benchmarks() (in module main)": [[8, "main.check_for_benchmarks"]], "launch_processor() (in module main)": [[8, "main.launch_processor"]], "main": [[8, "module-main"]], "main() (in module main)": [[8, "main.main"]], "parse_args() (in module main)": [[8, "main.parse_args"]], "setup_logging_for_run() (in module main)": [[8, "main.setup_logging_for_run"]]}})